// Copyright 2023-2025 NXP
// SPDX-License-Identifier: BSD-2-Clause
Configuration file for ADL parser & .td files generator based on LLVM requirements

// ---- TD files used for generation -----------------------------------------------------
RegisterInfoFile = ./examples/TD/RISCVRegisterInfo_gen.td
InstructionInfoFile = ./examples/TD/RISCVInstrInfo_gen.td
InstructionFormatFile = ./examples/TD/RISCVInstrFormats_gen.td
InstructionFormatFile16 = ./examples/TD/RISCVInstrFormats16_gen.td
InstructionAliases = ./examples/TD/RISCVInstrAliases_gen.td
OperandsFile = ./examples/TD/RISCVOperands_gen.td
OperandsFile16 = ./examples/TD/RISCVOperands16_gen.td
CallingConventionFile = ./examples/TD/RISCVCallingConv_gen.td
RelocationFile = ./examples/TD/RISCVReloc.def
IntrinsicsFile = ./examples/TD/RISCVIntrinsics_gen.td
BuiltinFile = ./examples/TD/BuiltinsRISCV.td
BuiltinHeader = ./examples/TD/riscv_builtin.h
MemoryOperand = ./examples/TD/RISCVMemoryOperand_gen.td
TestIntrinsics = ./testing/intrinsics/
ScheduleFile = ./examples/TD/RISCVSchedule_gen.td
SchedulePath = ./examples/TD/
ScheduleFileTable = ./examples/TD/RISCVScheduleTable_gen.td
TestScheduling = ./testing/scheduling/zilsd_zclsd/
SailDescription = ./examples/sail/riscv_insts_ext.sail
Features = ./examples/TD/RISCVFeatures.td

// ---- Environment variables and setup -----------------------------------------------------------------------
Namespace = RISCV
BaseArchitecture = rv32
RegisterClass = {GPR=RISCVReg}
RegisterClassChild = {RegisterClassName=RISCVRegisterClass, RegisterBaseClass=RegisterClass, Namespace=RISCV, IsVRegClass=0, VLMul=1, NF=1, Size='!if(IsVRegClass,!mul(VLMul,NF,64),0)', TSFlags{0}=IsVRegClass, TSFlags{3-1}='!logtwo(VLMul)', TSFlags{6-4}='!sub(NF,1)'}
RegisterClassWrapper = {RISCVRegisterClass=GPR}
RegisterClassSubRegs_GPR = RISCVRegWithSubRegs
InstructionClass = RVInst
InstructionClassC = RVInst16
InstructionFormat = InstFormat
RegAltNameIndex = ABIRegAltName
FallbackRegAltNameIndex = NoRegAltName
LLVMRegBasicWidth = 32
LLVMStandardInstructionWidth = 32
AsmString = opcodestr # "\t" # argstr
LLVMConstraintClassWidth = 3
LLVMConstraintRiscVPrefix = RV
LLVMConstraintName = VConstraint
LLVMConstraintValues = NoConstraint
LLVMNoConstraintValue = 0b000
TSFlagsFirstConstraint = 7
TSFlagsLastConstraint = 5
sideEffectAttribute = ""
sideEffectAttributeSpecific = sideEffect
memorySynchronizationInstruction = sync
XLenVT = i32
XLenVT_key = XLenVT
XLenFVT = i32
XLenFVT_key = XLenFVT
XLenFVTPair = i64
XLenFVTPair_key = XLenPairFVT
XLenRI = RegInfo<32,32,32>
XLenRI_key = XLenRI
DefineSP = True

// ---- Instructions Types --------------------------------------------------------------------------
instructionFormatR = InstFormatR
instructionFormatCR = InstFormatCR
instructionFormatI = InstFormatI
instructionFormatCI = InstFormatCI
instructionFormatU = InstFormatU
instructionFormatS = InstFormatS
instructionFormatCS = InstFormatCS

// ---- LLVM Format Info ----------------------------------------------------------------------------
TSFlagsFirst = 4
TSFlagsLast = 0
aliasGPR_8 = GPRC
aliasGPR_1 = GPRNoX0
aliasGPR_1Nox2 = GPRNoX0X2
LLVMPrivilegedAttributes = {""}
LLVMOtherVTAttrib = {}
LLVMOtherVTReloc = {}
LLVMOtherVTValue = OtherVT
LLVMPrintMethodAttrib = {}
LLVMPrintMethodReloc = {}
LLVMOperandTypeAttrib = {}
LLVMOperandTypeReloc = {}
LLVMOperandTypeValue = OPERAND_PCREL
SImmAsmOperandParameters = {int_width, string_suffix}
UImmAsmOperandParameters = {int_width, string_suffix}
ImmAsmOperandParameters = {string_prefix, int_width, string_suffix}
ImmAsmOperandName = {prefix, width, suffix}
ImmAsmOperandRenderMethod = addImmOperands
ImmAsmOperandDiagnosticType = !strconcat("Invalid", Name)
basicDecodeMethod = {decodeUImmOperand, decodeSImmOperand}
LLVMVFlags = {VLMul, ForceTailAgnostic, IsTiedPseudo, HasSEWOp, HasVLOp, HasVecPolicyOp, IsRVVWideningReduction, UsesMaskPolicy, IsSignExtendingOpW, HasRoundModeOp, UsesVXRM, TargetOverlapConstraintType}
VLMul = 0
VLMulTSFlagsStart = 10
VLMulTSFlagsEnd = 8
ForceTailAgnostic = false
ForceTailAgnosticTSFlagsStart = 11
ForceTailAgnosticTSFlagsEnd = 11
IsTiedPseudo = 0
IsTiedPseudoTSFlagsStart = 12
IsTiedPseudoTSFlagsEnd = 12
HasSEWOp = 0
HasSEWOpTSFlagsStart = 13
HasSEWOpTSFlagsEnd = 13
HasVLOp = 0
HasVLOpTSFlagsStart = 14
HasVLOpTSFlagsEnd = 14
HasVecPolicyOp = 0
HasVecPolicyOpTSFlagsStart = 15
HasVecPolicyOpTSFlagsEnd = 15
IsRVVWideningReduction = 0
IsRVVWideningReductionTSFlagsStart = 16
IsRVVWideningReductionTSFlagsEnd = 16
UsesMaskPolicy = 0
UsesMaskPolicyTSFlagsStart = 17
UsesMaskPolicyTSFlagsEnd = 17
IsSignExtendingOpW = 0
IsSignExtendingOpWTSFlagsStart = 18
IsSignExtendingOpWTSFlagsEnd = 18
HasRoundModeOp = 0
HasRoundModeOpTSFlagsStart = 19
HasRoundModeOpTSFlagsEnd = 19
UsesVXRM = 0
UsesVXRMTSFlagsStart = 20
UsesVXRMTSFlagsEnd = 20
TargetOverlapConstraintType = 0
TargetOverlapConstraintTypeTSFlagsStart = 22
TargetOverlapConstraintTypeTSFlagsEnd = 21


// ---- Calling Convention -----------------------------------------------------------------------------------
RegisterAllocationOrder = {GPR: [(Function_arguments, [0,1]), (Temporary, [0,1]), (Saved_register, [0,1]), Hard_wired_zero, (Return_address, [0,1]), (Stack_pointer, [0,1]), (Global_pointer, [0,1]), (Thread_pointer, [0,1])]}
CallingConventionAllocationOrder = {}
CallingConventionAllocationExcluded = {}
XLenRIRegInfo = RegInfoByHwMode<[RV32, RV64], [RegInfo<32,32,32>, RegInfo<64,64,64>]>
XLenVTValueType = ValueTypeByHwMode<[RV32, RV64], [i32, i64]>
RegInfosPair = RegInfoByHwMode<[RV32], [RegInfo<64, 64, 64>]>
SubReg_GPR_Even = SubRegIndex<32>
SubReg_GPR_Even_HW = SubRegRangeByHwMode<[RV32, RV64], [SubRegRange<32>, SubRegRange<64>]>
SubReg_GPR_Odd = SubRegIndex<32, 32>
SubReg_GPR_Odd_HW = SubRegRangeByHwMode<[RV32, RV64], [SubRegRange<32, 32>, SubRegRange<64, 64>]>

// ----Extensions Declaration-----------------------------------------------------------------------------------
LLVMExtRv32i = IsRV32
LLVMExtRv32c = HasStdExtC
HasStdExtCExtension = C
LLVMExtZilsd = HasStdExtZilsd
HasStdExtZilsdExtension = Zilsd
LLVMExtZclsd = HasStdExtZclsd
HasStdExtZclsdExtension = Zclsd
HasStdRv32iExtension = Rv32i
HasStdRv32cExtension = Rv32c

// ----Immediate Operands---------------------------------------------------------------------------------------------------------
ImmediateOperands = {GenericOperand, imm_u_pc, imm_u, imm_sb}
GenericOperand = {EncoderMethod=getImmOpValue}
imm_u_pc = {disableImmLeaf=True, AliasImmClass=uimm20_auipc, ParserMatchClass=UImmAsmOperand<20, "AUIPC">}
imm_u = {disableImmLeaf=True, AliasImmClass=uimm20_lui, ParserMatchClass=UImmAsmOperand<20, "LUI">}
imm_sb = {disableImmLeaf=True, EncoderMethod=getImmOpValueAsr1, DecoderMethod=decodeSImmOperandAndLsl1<13>}

// ----Additional Extension Info------------------------------------------------------------------------------------------------------------
ExtensionPrefixed = {Zclsd, Zilsd}
DecoderNamespace = {Zilsd=Zilsd, Others=RISCV32Only_}